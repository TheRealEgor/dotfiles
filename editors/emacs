;;;; package management
(require 'package)

;;; package repositories
(setq package-archives '(
                         ("gnu"           . "http://elpa.gnu.org/packages/")		
                         ("melpa"         . "http://melpa.org/packages/")
                         ("melpa-stable"  . "http://stable.melpa.org/packages/")
                         ))

;;; specify which repo to install packages from
(setq package-pinned-packages '(
                                (cider    . "melpa-stable")
                                ))

;;; packages to install
(setq package-list '(
                     ;; core
                     exec-path-from-shell 

		     ;; editing enhancements
                     paredit
                     rainbow-delimiters
		     ace-jump-mode
                     powerline
		     
                     ;; auto-completion
                     auto-complete

                     ;; themes
                     solarized-theme

                     ;; vim mode
                     evil 
                     evil-leader 
                     evil-paredit
                     evil-matchit 
                     evil-surround 
                     evil-nerd-commenter
                     evil-visualstar
                     evil-search-highlight-persist

                     ;; docs
                     dash-at-point

                     ;; projects / file / buffer mgmt
                     projectile
                     helm
                     helm-projectile
                     helm-ag

                     ;; clojure
                     clojure-mode
                     clojure-mode-extra-font-locking
                     cider
		     
		     ;; other syntaxes
                     ac-ispell
                     markdown-mode
		     
                     ;; wishlist / testing
                     ;html
                     ;sql
                     ;yaml
                     ;ansible
                     ;salt
                     ;shell
                     ;spotify
                     ;git
                     ;syntax checking
		     
		     ;; not in use
                     ;smartparens
                     ;evil-smartparens
                     ))

;;; loads packages and activates them
(package-initialize)

;;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;;; install packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))



;;;; initial settings

;;; path fix for os x gui mode
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;;; os x keybinding fix
;; For iTerm: Go to Preferences > Profiles > (your profile) > Keys > Left option key acts as: > choose +Esc

;;; evil mode settings
;; load evil-leader first so it's initialized from the start
(require 'evil-leader)
(setq evil-leader/in-all-states 1)
(global-evil-leader-mode)
(evil-leader/set-leader ",")

(require 'evil)
(evil-mode 1)

(require 'evil-matchit)
(global-evil-matchit-mode 1)

(evilnc-default-hotkeys)

(require 'evil-surround)
(global-evil-surround-mode 1)

(global-evil-visualstar-mode)

(require 'evil-search-highlight-persist)
(global-evil-search-highlight-persist t)

;;; project management
(projectile-global-mode)
(setq projectile-require-project-root nil)

;;; code completion settings
(ac-config-default)
;; set tab key to do all completion and disable return 
(define-key ac-completing-map "\t" 'ac-complete)
(define-key ac-completing-map "\r" nil)

;;; spell check
(custom-set-variables
  '(ac-ispell-requires 4)
  '(ac-ispell-fuzzy-limit 2))

(eval-after-load "auto-complete"
  '(progn
      (ac-ispell-setup)))

(add-hook 'markdown-mode-hook 'ac-ispell-ac-setup)
(add-hook 'git-commit-mode-hook 'ac-ispell-ac-setup)

;;; paredit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'prog-mode-hook #'enable-paredit-mode)
(add-hook 'prog-mode-hook #'evil-paredit-mode)

;;; rainbow delimiters
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;;; emacs powerline
(require 'powerline)
(powerline-vim-theme)

;;; clojure support
(require 'clojure-mode-extra-font-locking)
(add-hook 'cider-repl-mode-hook #'paredit-mode)

;;; slime support
;(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;(setq inferior-lisp-program "/usr/local/bin/sbcl")



;;;; user functions

;;; yes and no prompts
(defalias 'yes-or-no-p 'y-or-n-p)

;;; fix terminal colors function // called in user-config below
(defun remove-background-color()
  "Userful for transparent a terminal."
  (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))

;;; electric return functionality
(defvar electrify-return-match
  "[\]}\)\"]"
  "If this regexp matches the text after the cursor, do an \"electric\"
  return.")

(defun electrify-return-if-match (arg)
  "If the text after the cursor matches `electrify-return-match' then
   open and indent an empty line between the cursor and the text.  Move the
   cursor to the new line."
  (interactive "P")
  (let ((case-fold-search nil))
    (if (looking-at electrify-return-match)
      (save-excursion (newline-and-indent)))
    (newline arg)
    (indent-according-to-mode)))



;;;; user configuration

;;; theme
(load-theme 'solarized-dark t)

;;; font settings
(set-face-attribute 'default nil
		    :family "Menlo" :height 140 :weight 'normal)

;;; ui tweaks
(if (display-graphic-p)
  (progn
    (scroll-bar-mode -1)
    (tool-bar-mode -1)))
(menu-bar-mode -1)
(setq scroll-margin 8)

;;; initial widow size and position (`left . -1` is the closest i can get to right align)
(setq initial-frame-alist '((top . 0) (left . -1) (width . 120) (height . 80)))

;;; fix terminal colors
(add-hook 'window-setup-hook 'remove-background-color)
(add-hook 'server-visit-hook 'remove-background-color)



;;;; keyboard shortcuts

;;; electric return
(global-set-key (kbd "RET") 'electrify-return-if-match)

;;; evil - global
(evil-leader/set-key "/" 'evil-search-highlight-persist-remove-all)

;;; projects / files / buffers
(evil-leader/set-key "t" 'helm-projectile-find-file-dwim)
(evil-leader/set-key "b" 'helm-buffers-list)
(evil-leader/set-key "f" 'helm-projectile-ag)

;;; commenting
(evil-leader/set-key "cl" 'evilnc-comment-or-uncomment-lines)
(evil-leader/set-key "cp" 'evilnc-comment-or-uncomment-paragraphs)

;;; evil line movement tweaks
(define-key evil-motion-state-map "j" 'evil-next-visual-line)
(define-key evil-motion-state-map "k" 'evil-previous-visual-line)
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)

;;; evil emacs conflicts
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

;;; move to next / prev pane
(define-key evil-motion-state-map (kbd "C-j") 'evil-window-next)
(define-key evil-motion-state-map (kbd "C-k") 'evil-window-prev)

;;; close pane
;; evil-mode built in with `C-w c`

;;; close all other panes
(define-key evil-motion-state-map (kbd "C-z") 'delete-other-windows)

;;; jump to line / word
(evil-leader/set-key "jl" 'evil-ace-jump-line-mode)
(evil-leader/set-key "jc" 'evil-ace-jump-char-mode)

;;; clojure - cider
(evil-leader/set-key "ji" 'cider-jack-in)
(evil-leader/set-key "eb" 'cider-eval-buffer)
(evil-leader/set-key "ef" 'cider-eval-defun-at-point)
(evil-leader/set-key "rt" 'cider-test-run-tests)
(evil-leader/set-key "rb" 'cider-switch-to-repl-buffer)

;;; paredit
(evil-leader/set-key "W" 'paredit-wrap-sexp)
(evil-leader/set-key "w(" 'paredit-wrap-sexp)
(evil-leader/set-key "w[" 'paredit-wrap-square)
(evil-leader/set-key "w{" 'paredit-wrap-curly)
;; barf == push out of current sexp
;; slurp == pull into current sexp
(evil-leader/set-key ">>" 'paredit-forward-barf-sexp)
(evil-leader/set-key "><" 'paredit-forward-slurp-sexp)
(evil-leader/set-key "<<" 'paredit-backward-barf-sexp)
(evil-leader/set-key "<>" 'paredit-backward-slurp-sexp)
;; del surrounding parens / brackets / braces
(evil-leader/set-key "D" 'paredit-splice-sexp)

;;; doc search
(evil-leader/set-key "d" 'dash-at-point)

;;; line number toggle
(evil-leader/set-key "nn" 'linum-mode)

;;; edit config (.emacs)
;(evil-leader/set-key "ec" 'edit "~/.emacs")

;;; source config (.emacs)
;(evil-leader/set-key "sc" 'load-file "~/.emacs")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Values Set via Customize ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )
